<template id=\"scroll-tracker-template\"><slot></slot><!-- Allows for content projection --></template><script>\n        class ScrollTracker extends HTMLElement {\n        constructor() {\n            console.log('ScrollTracker')\n            super();\n            this.attachShadow({ mode: 'open' });\n            this.shadowRoot.appendChild(\n                document.getElementById('scroll-tracker-template').content.cloneNode(true)\n            );\n\n            this.observer = null;\n            this.debounceTimer = null;\n        }\n\n        connectedCallback() {\n            this.initIntersectionObserver();\n        }\n\n        disconnectedCallback() {\n            if (this.observer) {\n            this.observer.disconnect();\n            }\n            clearTimeout(this.debounceTimer);\n        }\n\n        initIntersectionObserver() {\n            const options = {\n            root: null, // observing changes to visibility in the viewport\n            rootMargin: '0px',\n            threshold: 0.5 // trigger when 50% of the target is visible\n            };\n\n            this.observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                if (entry.isIntersecting) {\n                this.debounceUpdateUrl(entry.target.id);\n                }\n            });\n            }, options);\n\n            this.querySelectorAll('a').forEach(anchor => {\n            if (anchor.href && anchor.id) {\n                this.observer.observe(anchor);\n            }\n            });\n        }\n\n        debounceUpdateUrl(id) {\n            clearTimeout(this.debounceTimer);\n            this.debounceTimer = setTimeout(() => {\n            history.pushState({}, '', `#${id}`);\n            }, 300); // Debounce time of 300ms\n        }\n        }\n\n        customElements.define('scroll-tracker', ScrollTracker);\n    </script>
